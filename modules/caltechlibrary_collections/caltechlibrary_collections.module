<?php
/**
 * @file
 * Custom code for the Caltech Library Collections module.
 */

/**
 * Implements hook_views_api().
 */
function caltechlibrary_collections_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'caltechlibrary_collections') . '/includes/views',
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function caltechlibrary_collections_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'views_data_alter') {
    $group = $implementations['caltechlibrary_collections'];
    unset($implementations['caltechlibrary_collections']);
    $implementations['caltechlibrary_collections'] = $group;
  }
}

/**
 * Implements hook_node_view().
 */
function caltechlibrary_collections_node_view($node, $view_mode) {
  $links = array();

  if ($node->comment != COMMENT_NODE_HIDDEN) {
    if ($view_mode == 'rss') {
      // Add a comments RSS element which is a URL to the comments of this node.
      $node->rss_elements[] = array(
        'key' => 'comments',
        'value' => url('node/' . $node->nid, array('fragment' => 'comments', 'absolute' => TRUE))
      );
    }
    elseif ($view_mode == 'teaser') {
      // Teaser view: display the number of comments that have been posted,
      // or a link to add new comments if the user has permission, the node
      // is open to new comments, and there currently are none.
      if (user_access('access comments')) {
        if (!empty($node->comment_count)) {
          $links['comment-comments'] = array(
            'title' => format_plural($node->comment_count, '1 comment', '@count comments'),
            'href' => "node/$node->nid",
            'attributes' => array('title' => t('Jump to the first comment of this posting.')),
            'fragment' => 'comments',
            'html' => TRUE,
          );
          // Show a link to the first new comment.
          if ($new = comment_num_new($node->nid)) {
            $links['comment-new-comments'] = array(
              'title' => format_plural($new, '1 new comment', '@count new comments'),
              'href' => "node/$node->nid",
              'query' => comment_new_page_count($node->comment_count, $new, $node),
              'attributes' => array('title' => t('Jump to the first new comment of this posting.')),
              'fragment' => 'new',
              'html' => TRUE,
            );
          }
        }
      }
      if ($node->comment == COMMENT_NODE_OPEN) {
        if (user_access('post comments')) {
          $links['comment-add'] = array(
            'title' => t('+ comment'),
            'href' => "node/$node->nid",
            'attributes' => array('title' => t('Add a new comment.')),
            'fragment' => 'comment-form',
          );
        }
        else {
          $links['comment_forbidden'] = array(
            'title' => theme('comment_post_forbidden', array('node' => $node)),
            'html' => TRUE,
          );
        }
      }
    }
    elseif ($view_mode != 'search_index' && $view_mode != 'search_result') {
      // Node in other view modes: add a "post comment" link if the user is
      // allowed to post comments and if this node is allowing new comments.
      // But we don't want this link if we're building the node for search
      // indexing or constructing a search result excerpt.
      if ($node->comment == COMMENT_NODE_OPEN) {
        $comment_form_location = variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW);
        if (user_access('post comments')) {
          // Show the "post comment" link if the form is on another page, or
          // if there are existing comments that the link will skip past.
          if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE || (!empty($node->comment_count) && user_access('access comments'))) {
            $links['comment-add'] = array(
              'title' => t('+ comment'),
              'attributes' => array('title' => t('Share your thoughts and opinions related to this posting.')),
              'href' => "node/$node->nid",
              'fragment' => 'comment-form',
            );
            if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE) {
              $links['comment-add']['href'] = "comment/reply/$node->nid";
            }
          }
        }
        else {
          $links['comment_forbidden'] = array(
            'title' => theme('comment_post_forbidden', array('node' => $node)),
            'html' => TRUE,
          );
        }
      }
    }

    $node->content['links']['comment'] = array(
      '#theme' => 'links__node__comment',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );

    // Only append comments when we are building a node on its own node detail
    // page. We compare $node and $page_node to ensure that comments are not
    // appended to other nodes shown on the page, for example a node_reference
    // displayed in 'full' view mode within another node.
    if ($node->comment && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
      $node->content['comments'] = comment_node_page_additions($node);
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function caltechlibrary_collections_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['comment_post_forbidden'])) {
    $theme_registry['comment_post_forbidden']['function'] = 'caltechlibrary_collections_comment_post_forbidden';
  }
}

/**
 * Customized version of the theme_comment_post_forbidden() function.
 *
 * Uses the login URL from `shib_auth` if available instead of `/user/login`.
 *
 * @param $variables
 *   An associative array containing:
 *   - node: The comment node.
 */
function caltechlibrary_collections_comment_post_forbidden($variables) {
  $node = $variables['node'];
  global $user;

  // Since this is expensive to compute, we cache it so that a page with many
  // comments only has to query the database once for all the links.
  $authenticated_post_comments = &drupal_static(__FUNCTION__, NULL);

  if (!$user->uid) {
    if (!isset($authenticated_post_comments)) {
      // We only output a link if we are certain that users will get permission
      // to post comments by logging in.
      $comment_roles = user_roles(TRUE, 'post comments');
      $authenticated_post_comments = isset($comment_roles[DRUPAL_AUTHENTICATED_RID]);
    }

    if ($authenticated_post_comments) {
      // We cannot use drupal_get_destination() because these links
      // sometimes appear on /node and taxonomy listing pages.
      if (variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW) == COMMENT_FORM_SEPARATE_PAGE) {
        $destination = array('destination' => "comment/reply/$node->nid#comment-form");
      }
      else {
        $destination = array('destination' => "node/$node->nid#comment-form");
      }

      if (module_exists('shib_auth')) {
        // We change the login links to use Shibboleth instead of Drupal.
        if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
          // Users can register themselves.
          return t('<a href="@login">log in</a> or <a href="@register">register</a> to post comments', array('@login' => shib_auth_generate_login_url(), '@register' => url('user/register', array('query' => $destination))));
        }
        else {
          // Only admins can add new users, no public registration.
          return t('<a href="@login">log in</a> to comment', array('@login' => shib_auth_generate_login_url()));
        }
      }
      else {
        // We use the default functionality.
        if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
          // Users can register themselves.
          return t('<a href="@login">log in</a> or <a href="@register">register</a> to post comments', array('@login' => url('user/login', array('query' => $destination)), '@register' => url('user/register', array('query' => $destination))));
        }
        else {
          // Only admins can add new users, no public registration.
          return t('<a href="@login">log in</a> to comment', array('@login' => url('user/login', array('query' => $destination))));
        }
      }
    }
  }
}

/**
 * Implements hook_filter_info_alter().
 */
function caltechlibrary_collections_filter_info_alter(&$info) {
  if (module_exists('mathjax')) {
    $info['filter_mathjax']['tips callback'] = '_caltechlibrary_collections_mathjax_filter_tips';
  }
}

/**
 * Filter tips callback for the mathjax filter.
 */
function _caltechlibrary_collections_mathjax_filter_tips($filter, $format, $long = FALSE) {
  return t('<span class="tex2jax_ignore">Mathematics are rendered by
    <a href="@url">MathJax</a>. The default math delimiters are $$…$$ and \[…\]
    for displayed mathematics, and $…$ and \(…\) for in-line mathematics. Type
    \$ for a literal dollar sign.</span>',
    array('@url' => url('https://www.mathjax.org/'))
  );
}
